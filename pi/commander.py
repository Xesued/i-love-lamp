import neopixel

from config import COMMAND_SIZE

class Commander:
    def __init__(self, num_of_leds, gpio_pin, mac_bytes):
        """
        param: neo_strip Instance of Neopixel 
        """
        self.mac_bytes = mac_bytes
        self.num_of_leds = num_of_leds
        self.nol_bytes = list(num_of_leds.to_bytes(2, "big"))
        self.led_strip = neopixel.NeoPixel(gpio_pin, num_of_leds, bpp=4)


    def parse(self, command_bytes):
        """
        Parses some data.  There are 3 parts of the data stream:
        1. The command (1 byte)
        2. The command id (2 bytes). Generated by the client.  Echoed in response.
        3. The command data.  Example, the LED colors
        """
        
        cmd = command_bytes[0]
        rsp = list([command_bytes[1], command_bytes[2]])

        if cmd == 1:
            # Ping command
            # returns the number of LEDS configured and 
            # the mac address of the device

            rsp.extend(self.nol_bytes)
            rsp.extend(self.mac_bytes)
            return bytearray(rsp)
        
        if cmd == 2:
            l = len(command_bytes)
            p = 3  # The starting point of data 
            s = self.led_strip
            while p < l:
                rgbw = (
                    command_bytes[0 + p],
                    command_bytes[1 + p],
                    command_bytes[2 + p],
                    command_bytes[3 + p],
                )
                
                s[p // 4] = rgbw
                p = p + 4
            
            self.led_strip.write()
            rsp.append(0)  # Success
            return bytearray(rsp)
        return bytearray([0])
        
        